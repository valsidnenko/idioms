from collections import Counter
import re
import pymorphy2
morph = pymorphy2.MorphAnalyzer()
def tokenize_text(text):
   words = re.findall(r'\b\w+\b', text.lower())
   return words
def extract_word_phrases(words):
   word_phrases = []
   for i in range(len(words) - 1):
     #Прил+сущ
       if ('ADJF' in morph.parse(words[i])[0].tag) and ('NOUN' in morph.parse(words[i + 1])[0].tag):
           word_phrases.append(words[i] + ' ' + words[i + 1])
       # Существительное + прилагательное
       if ('NOUN' in morph.parse(words[i])[0].tag) and ('ADJF' in morph.parse(words[i + 1])[0].tag):
           word_phrases.append(words[i] + ' ' + words[i + 1])
       # Существительное + глагол
       if ('NOUN' in morph.parse(words[i])[0].tag) and ('VERB' in morph.parse(words[i + 1])[0].tag):
           word_phrases.append(words[i] + ' ' + words[i + 1])
       # Глагол + существительное
       if ('VERB' in morph.parse(words[i])[0].tag) and ('NOUN' in morph.parse(words[i + 1])[0].tag):
           word_phrases.append(words[i] + ' ' + words[i + 1])
       # Глагол + наречие
       if ('VERB' in morph.parse(words[i])[0].tag) and ('ADVB' in morph.parse(words[i + 1])[0].tag):
           word_phrases.append(words[i] + ' ' + words[i + 1])
       # Наречие + глагол
       if ('ADVB' in morph.parse(words[i])[0].tag) and ('VERB' in morph.parse(words[i + 1])[0].tag):
           word_phrases.append(words[i] + ' ' + words[i + 1])
       # Местоимение + глагол
       if ('NPRO' in morph.parse(words[i])[0].tag) and ('VERB' in morph.parse(words[i + 1])[0].tag):
           word_phrases.append(words[i] + ' ' + words[i + 1])
       # Глагол + местоимение
       if ('VERB' in morph.parse(words[i])[0].tag) and ('NPRO' in morph.parse(words[i + 1])[0].tag):
           word_phrases.append(words[i] + ' ' + words[i + 1])
       # Местоимение + прилагательное
       if ('NPRO' in morph.parse(words[i])[0].tag) and ('ADJF' in morph.parse(words[i + 1])[0].tag):
           word_phrases.append(words[i] + ' ' + words[i + 1])
       # Прилагательное + местоимение
       if ('ADJF' in morph.parse(words[i])[0].tag) and ('NPRO' in morph.parse(words[i + 1])[0].tag):
           word_phrases.append(words[i] + ' ' + words[i + 1])
   return word_phrases
def extract_word_phrases(words):
   word_phrases = []
   for i in range(len(words) - 1):
       phrase = words[i] + ' ' + words[i + 1]
       if len(phrase.split()) >= 2:  # Проверка на количество слов в словосочетании (не менее 2)
           word_phrases.append(phrase)
   return word_phrases
# Ввод текста для анализа
text_input = input("Введите текст для анализа: ")
# Токенизация текста
words = tokenize_text(text_input)
# Извлечение словосочетаний (с разными грамматическими сочетаниями)
word_phrases = extract_word_phrases(words)
# Лемматизация словосочетаний
lemmas = [morph.parse(word)[0].normal_form for word in word_phrases]
# Подсчет уникальных словосочетаний
word_counts = Counter(lemmas)
for word, count in word_counts.most_common():
   print(f'Словосочетание: {word}, Количество повторений: {count}')

